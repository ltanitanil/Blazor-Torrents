<div class="searchAndFilterPanel-1">
    <EditForm Model=@Criteria OnValidSubmit=@(async() => await GetTorrentsList(0))>
        <div class="searchAndFilterPanel-1-header">
            <div class="searchAndFilterPanel-1-header-search">
                <div class="searchAndFilterPanel-1-header-search-flex">
                    <div class="sa-torrents-title"><div class="Item1">Каталог</div><div class="Item2">торрентов</div></div>
                    <div class="input-group">
                        <input type="search" @bind=@Criteria.SearchText />
                        <div class="input-group-append">
                            <button type="button" @onclick=@(async() =>await GetTorrentsList(0))><i class="fa fa-search"></i></button>
                        </div>
                    </div>
                </div>
                <div class="menu">
                    <div class="filterswitch"><button type="button" @onclick="@((e)=>FilterSwitch = !FilterSwitch)"><i class="fa fa-filter" aria-hidden="true"></i></button></div>
                </div>
            </div>
        </div>
        <div class="searchAndFilterPanel-1-header-search">
            <div class="filters @FilterSwitch">
                @if (Data != null)
                {
                    <div class="filters-items">
                        <lable class="filter-label" data-title="Форумы">
                            <select @onchange=@ForumsClicked class="filter-select">
                                <option>Все</option>
                                @foreach (var forum in Data.Forums)
                                {
                                    <option value=@forum.Id>@forum.Value</option>
                                }
                            </select>
                        </lable>
                    </div>
                    <div class="filters-items">
                        <EjsDateRangePicker id='daterangepicker' min='@minDate' max='@maxDate' Change=@((e) => DateChange(e.Value))> </EjsDateRangePicker>
                    </div>
                    <div class="filters-items">
                        <div class="filters-items-size">
                            <label class="label-size">Размер торрентов:</label>
                            <div style="padding:10px;">
                                <input type="number" @bind=@Criteria.Size.From placeholder="0" />
                                <input type="number" @bind=@Criteria.Size.To placeholder=@Data.TorrentMaxSize />
                            </div>
                        </div>
                    </div>
                    <div class="filter-buttons">
                        <button type="reset" @onclick=@ResetFilters>Сбросить</button>
                        <button>Применить</button>

                    </div>
                }
                else
                {
                    <div>Загрузка...</div>
                }
            </div>
        </div>
    </EditForm>
</div>

@code{
    [Parameter] Func<Task<SearchAndFilterData>> GetData { get; set; }
    [Parameter] protected SearchAndFilterCriteria Criteria { get; set; }
    [Parameter] Func<int, Task> GetTorrentsList { get; set; }

    private SearchAndFilterData Data { get; set; }
    private bool FilterSwitch { get; set; }


    public DateTime minDate { get; set; } = new DateTime(2005, 5, 1);
    public DateTime maxDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);

    protected override async Task OnInitAsync()
    {
        Data = await GetData();
    }

    private void DateChange(object value)
    {
        var temp = SplitValue(value);

        Criteria.Date.From = DateTimeOffset.Parse(temp.ElementAtOrDefault(0));
        Criteria.Date.To = DateTimeOffset.Parse(temp.ElementAtOrDefault(1));
    }

    private IEnumerable<string> SplitValue(object value)
    {
        return value.ToString().Split(new[] { '[', ']', ',', '"' }).Where(x => !string.IsNullOrWhiteSpace(x));
    }


    private async void ResetFilters()
    {
        Criteria.SearchText = null;
        Criteria.SelectedForumId = null;
        Criteria.Size.From = null;
        Criteria.Size.To = null;
        Criteria.Date.From = null;
        Criteria.Date.To = null;

        await GetTorrentsList(0);
    }

    private protected void ForumsClicked(UIChangeEventArgs forumEvent)
    {
        Criteria.SelectedForumId = Int32.TryParse(forumEvent.Value.ToString(), out var tempVal) ? tempVal : (int?)null;
    }

}

