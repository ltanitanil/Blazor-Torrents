@page "/Registration"

@inject IAuthService AuthService
@inject NavigationManager UriHelper
@inject IModalService Modal


<div class="register-container">
    <div class="register-container-card">
        <div class="register-container-card-h">
            <h1>Регистрация</h1>
            <h1>аккаунта</h1>
        </div>
        @if (!string.IsNullOrWhiteSpace(Errors))
        {
            <div class="alert alert-danger" role="alert">
                <p>@Errors</p>
            </div>
        }
        <div class="card-myform">
            <EditForm Model="registerModel" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="email">Почтовый адрес:</label>
                    <InputText Id="email" Class="form-control" @bind-Value="registerModel.Email" />
                    <ValidationMessage For="@(() => registerModel.Email)" />
                </div>
                <div class="form-group">
                    <label for="password">Пароль:</label>
                    <InputText Id="password" Class="form-control" @bind-Value="registerModel.Password" />
                    <ValidationMessage For="@(() => registerModel.Password)" />
                </div>
                <div class="form-group">
                    <label for="password">Повторите пароль:</label>
                    <InputText Id="password" Class="form-control" @bind-Value="registerModel.ConfirmPassword" />
                    <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                </div>
                <div class="form-group">
                    <label for="description">Пол:</label>
                    <div>
                        <MatRadioGroup @bind-value="registerModel.Gender">
                            <MatRadioButton Value="male" Label="Мужской"></MatRadioButton>
                            <MatRadioButton Value="female" Label="Женский"></MatRadioButton>
                        </MatRadioGroup>
                        <ValidationMessage For="@(() => registerModel.Gender)" />
                    </div>
                </div>
                <div class="form-group">
                    <label for="date">Дата рождения:</label>
                    <InputDate Id="password" Class="form-control" @bind-Value="registerModel.DateOfBirth" />
                    <ValidationMessage For="@(() => registerModel.DateOfBirth)" />
                </div>
                <div class="form-group">
                    <label for="description">Обо мне: (необязательно)</label>
                    <InputTextArea Id="information" Class="form-control" @bind-Value="registerModel.AboutUser" />
                    <ValidationMessage For="@(() => registerModel.AboutUser)" />
                </div>
                <div class="form-group-flex">
                    <button type="submit" class="btn btn-primary">Создать аккаунт</button>
                    <a href="/" class="card-myform-a">Отмена</a>
                </div>
            </EditForm>

        </div>
    </div>
</div>
@code {
    private RegistrationViewModel registerModel = new RegistrationViewModel();
    private string Errors;

    private async Task HandleRegistration()
    {
        try
        {
            await AuthService.Register(registerModel);
            Modal.Show("ФОРМА ВХОДА", typeof(Login));
            UriHelper.NavigateTo("/");
        }
        catch(ResponseException exp)
        {
            Errors = exp.Message;
            StateHasChanged();
        }
    }

}

