@page "/TorrentUpload"
@attribute [Authorize]

@inject ITorrentsService state
@inject NavigationManager UriHelper


<h3>TorrentUpload</h3>
@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@response.Error</p>
    </div>
}

<EditForm Model=@newTorrent OnValidSubmit=@UploadTorrent>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="title">Название: </label>
        <InputText Id="title" Class="form-control" @bind-Value="newTorrent.Title" />
        <ValidationMessage For="@(() => newTorrent.Title)" />
    </div>
    <div class="form-group">
        <label for="content">Описание: </label>
        <InputTextArea Id="content" Class="form-control" @bind-Value="newTorrent.Content" />
        <ValidationMessage For="@(() => newTorrent.Content)" />
    </div>
    <div class="form-group">
        <label for="dirNam">Название директории: </label>
        <InputText Id="dirNam" Class="form-control" @bind-Value="newTorrent.DirName" />
        <ValidationMessage For="@(() => newTorrent.DirName)" />
    </div>
    <div class="form-group">
        <label for="forumId">Номур форума: </label>
        <InputNumber Id="forumId" Class="form-control" @bind-Value="newTorrent.ForumId" />
        <ValidationMessage For="@(() => newTorrent.ForumId)" />
    </div>
    <div>
        <input type="file" name="files" @ref=inputTypeFileElement multiple />
    </div>

    <button>Сохранить</button>
</EditForm>

@code {
    ElementReference inputTypeFileElement;
    TorrentUploadViewModel newTorrent = new TorrentUploadViewModel();
    ResponseModel response;
    private bool ShowErrors;

    public async Task UploadTorrent()
    {
        response = await state.UploadTorrent(newTorrent, inputTypeFileElement);

        if (response.Successful)
        {
            UriHelper.NavigateTo("/");
        }
        else
        {
            ShowErrors = true;
            StateHasChanged();
        }
    }

}
