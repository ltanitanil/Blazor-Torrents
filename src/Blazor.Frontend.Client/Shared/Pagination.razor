
<div class="mypagination">
    <a @onclick=@(async()=>await GetTorrentsList(pages.First()))><i class="fas fa-chevron-circle-left"></i></a>
    @foreach (var p in pages)
    {
        if (p != PaginationModel.CurrentPage)
        {
            <a @onclick=@(async() =>await GetTorrentsList(p))>@(p + 1)</a>
        }
        else
        {
            <a @onclick=@(async() =>await GetTorrentsList(p)) style="background-color:darkgreen;border-radius:20px;">@(p + 1)</a>
        }


    }
    <a @onclick=@(async()=>await GetTorrentsList(pages.Last()))><i class="fas fa-chevron-circle-right"></i></a>
</div>

@code{
    [Parameter] PaginationInfoViewModel PaginationModel { get; set; }
    [Parameter] Func<int, Task> GetTorrentsList { get; set; }

    private IEnumerable<int> pages;
    private int maxPages = 5;

    protected override void OnInit()
    {
        pages = GetPages(PaginationModel);
    }

    private IEnumerable<int> GetPages(PaginationInfoViewModel paginationModel)
    {
        var totalPages = (int)Math.Ceiling((decimal)paginationModel.TotalItems / (decimal)paginationModel.PageSize);

        int startPage, endPage;
        if (totalPages <= maxPages)
        {
            startPage = 0;
            endPage = totalPages;
        }
        else
        {
            var maxPagesBeforeCurrentPage = (int)Math.Floor((decimal)maxPages / (decimal)2);
            var maxPagesAfterCurrentPage = (int)Math.Ceiling((decimal)maxPages / (decimal)2) - 1;
            if (paginationModel.CurrentPage <= maxPagesBeforeCurrentPage)
            {
                startPage = 0;
                endPage = maxPages - 1;
            }
            else if (paginationModel.CurrentPage + maxPagesAfterCurrentPage >= totalPages)
            {
                startPage = totalPages - maxPages + 1;
                endPage = totalPages;
            }
            else
            {
                startPage = paginationModel.CurrentPage - maxPagesBeforeCurrentPage;
                endPage = paginationModel.CurrentPage + maxPagesAfterCurrentPage;
            }
        }

        return Enumerable.Range(startPage, (endPage + 1) - startPage);
    }
}